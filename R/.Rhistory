library(survey)
discr<-simulsampling(betaBM=0.4, pBM=0.5,pstrata = NULL,betastrata=NULL,acc.aux=NULL,  cens=0.1,k=0.1,lambda=0.9,tau=2,N=2000,n=600,B=3,seed=NULL)
library(multipleNCC)
library(Epi)
discr<-simulsampling(betaBM=0.4, pBM=0.5,pstrata = NULL,betastrata=NULL,acc.aux=NULL,  cens=0.1,k=0.1,lambda=0.9,tau=2,N=2000,n=600,B=3,seed=NULL)
discr
load("C:/Users/Graziano/garrbox/CenterTBI/Elderly/September2020/data/complicanze/Complicanze.RData")
trainingICU
trainingICU$goseordinalfquattro
fitpol <- polr(goseordinalfquattro ~percfrail100+Subject.Age+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival,data=trainingICU)
library(MASS, lib.loc = "C:/Program Files/R/R-4.0.3/library")
fitpol <- polr(goseordinalfquattro ~percfrail100+Subject.Age+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival,data=trainingICU)
install.packages("ordinal")
fm1 <- clm(goseordinalfquattro ~percfrail100+Subject.Age+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival,data=trainingICU)
library(ordinal)
fm1 <- clm(goseordinalfquattro ~percfrail100+Subject.Age+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival,data=trainingICU)
summary(fm1)
0.019436
exp( 0.019436)
pr1 <- profile(fm1)
pr1
plot(pr1, root = TRUE)
?profile
pr1 <- profile(fm1)
plot(pr1, root = TRUE)
plot(fm1)
fm1 <- clm(goseordinalfquattro ~percfrail100+Subject.Age+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival,data=trainingICU)
plot(fm1)
fm1 <- clm(goseordinalfquattro ~percfrail100+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival,data=trainingICU)
summary(fm1)
pr1 <- profile(fm1)
plot(pr1, root = TRUE)
plot(fm1)
fitpol <- polr(goseordinalfquattro ~percfrail100+Subject.Age+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival,data=trainingICU)
house.resid <- residuals(fitpol)
house.resid
residuals(fitpol)
predict(fm1,type =  "linear.predictor")
plot(predict(fm1,type =  "linear.predictor"))
F<-predict(fm1,type =  "linear.predictor")
length(F)
head(predict(fm1,type =  "linear.predictor"))
install.packages("PResiduals")
library(PResiduals)
pres <- presid(fitpol)
pres
p1 <- autoplot(fitpol, nsim = 100, what = "qq")
install.packages("survMisc")
library(survMisc)
p1 <- autoplot(fitpol, nsim = 100, what = "qq")
fitpol <- polr(goseordinalfquattro ~percfrail100+Subject.Age+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival,method = "probit",data=trainingICU)
p1 <- autoplot(fitpol, nsim = 100, what = "qq")
fit.probit <- polr(goseordinalfquattro ~percfrail100+Subject.Age+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival,method = "probit",data=trainingICU)
p1 <- autoplot(fit.probit, nsim = 100, what = "qq")
fit.vgam <- vgam(oseordinalfquattro ~percfrail100+Subject.Age+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival, family = cumulative(link = probit, parallel = TRUE),
data = trainingICU)
library(VGAM)
fit.vgam <- vgam(oseordinalfquattro ~percfrail100+Subject.Age+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival, family = cumulative(link = probit, parallel = TRUE),
data = trainingICU)
fit.vgam <- vgam(goseordinalfquattro ~percfrail100+Subject.Age+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival, family = cumulative(link = probit, parallel = TRUE),
data = trainingICU)
warnings()
fit.vgam <- vgam(goseordinalfquattro ~percfrail100+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival, family = cumulative(link = probit, parallel = TRUE),
data = trainingICU)
p1 <- autoplot(fit.vgam, what = "covariate", x = trainingICU$percfrail100, method = "jitter",
xlab = "x")
?autoplot
p1 <- survMisc::autoplot(fit.vgam, what = "covariate", x = trainingICU$percfrail100, method = "jitter",
xlab = "x")
library(ggplot2)
p1 <- survMisc::autoplot(fit.vgam, what = "covariate", x = trainingICU$percfrail100, method = "jitter",
xlab = "x")
p1 <- autoplot(fit.vgam, what = "covariate", x = trainingICU$percfrail100, method = "jitter",
xlab = "x")
p1 <- autoplot(fit.vgam, what = "covariate", x = trainingICU$percfrail100, method = "jitter", xlab = "x")
p1 <- autoplot(fit.vgam, what = "covariate", x = trainingICU$percfrail100)
p1 <- autoplot(fit.vgam,  x = trainingICU$percfrail100)
fit.probit <- polr(goseordinalfquattro ~percfrail100+Subject.Age+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival,method = "probit",data=trainingICU)
p1 <- autoplot(fit.probit, nsim = 100, what = "qq")
install.packages("sure")
library(sure)
fit.probit <- polr(goseordinalfquattro ~percfrail100+Subject.Age+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival,method = "probit",data=trainingICU)
p1 <- autoplot(fit.probit, nsim = 100, what = "qq")
autoplot.resid(fit.vgam)
autoplot.resid(fit.probit)
fit.probit <- polr(goseordinalfquattro ~percfrail100+Subject.Age+Subject.Age+PupillaryReactivity+GCSMotorScoreatEDArrival,method = "probit",data=trainingICU)
autoplot.resid(fit.probit)
fit.probit <- polr(goseordinalfquattro ~percfrail100,method = "probit",data=trainingICU)
p1 <- autoplot(fit.vgam,  x = trainingICU$percfrail100)
autoplot.resid(fit.probit)
polr.probit <- polr(oseordinalfquattro ~percfrail100, data = trainingICU, method = "probit")
polr.probit <- polr(goseordinalfquattro ~percfrail100, data = trainingICU, method = "probit")
autoplot(polr.probit, nsim = 50, what = "qq") +
ggtitle("polr: probit link")
polr.probit
autoplot.polr(polr.probit, nsim = 50, what = "qq") +
ggtitle("polr: probit link")
autoplot.polr(polr.probit, nsim = 10, what = "qq") +
ggtitle("polr: probit link")
autoplot.polr(polr.probit, nsim = 1, what = "qq") +
ggtitle("polr: probit link")
polr.probit <- polr(goseordinalfquattro ~Subject.Age, data = trainingICU, method = "probit")
autoplot.polr(polr.probit, nsim = 50, what = "qq") +
ggtitle("polr: probit link")
polr.probit <- polr(goseordinalfquattro ~percfrail100, data = trainingICU, method = "probit")
autoplot.polr(polr.probit, nsim = 1, what = "qq") +
ggtitle("polr: frail")
polr.probit <- polr(goseordinalfquattro ~Subject.Age, data = trainingICU, method = "probit")
autoplot.polr(polr.probit, nsim = 50, what = "qq") +
ggtitle("polr: age")
autoplot.polr(polr.probit, nsim = 50, what = "qq") +
ggtitle("polr: age")+ xlab("")
polr.probit <- polr(goseordinalfquattro ~Subject.Age, data = trainingICU, method = "probit")
autoplot.polr(polr.probit, nsim = 1, what = "qq") +
ggtitle("polr: age")+ xlab("")
autoplot.polr(polr.probit, nsim = 1, what = "qq") +
ggtitle("polr: frail")+ xlab("")
polr.probit <- polr(goseordinalfquattro ~percfrail100, data = trainingICU, method = "probit")
autoplot.polr(polr.probit, nsim = 1, what = "qq") +
ggtitle("polr: frail")+ xlab("")
polr.probit <- polr(goseordinalfquattro ~Subject.Age, data = trainingICU, method = "probit")
autoplot.polr(polr.probit, nsim = 1, what = "qq") +
ggtitle("polr: age")+ xlab("")
polr.probit <- polr(goseordinalfquattro ~percfrail100, data = trainingADM, method = "probit")
autoplot.polr(polr.probit, nsim = 1, what = "qq") +
ggtitle("polr: frail")+ xlab("")
polr.probit <- polr(goseordinalfquattro ~Subject.Age, data = trainingADM, method = "probit")
autoplot.polr(polr.probit, nsim = 1, what = "qq") +
ggtitle("polr: age")+ xlab("")
autoplot.polr(polr.probit, nsim = 10, what = "qq") +
ggtitle("polr: age")+ xlab("")
polr.probit
autoplot.polr
20/50
5*20/50
12/4
12/36
36-14
36/4
36-7-5
7*12/36
5*12/36
6*12/36
8*(12/36)
9*(12/36)
36-12
36-9-6
10*(12/36)
11*(12/36)
14*(12/36)
13*(12/36)
12*(12/36)
12-2-3-4
6+9+12+10
install.packages("C:/Users/Graziano/garrbox/Two_phase_Bozza/Design2phase_package/design2phase_0.1.0.zip", repos = NULL, type = "win.binary")
library(design2phase)
prova<-PowerIIphase(
betaBM=0.4,
pBM=0.2,
pstrata = 0.6,
betastrata = 0.5,
acc.aux = c(0.8,0.8),
design2p = c("CM","PPS"),
N=2000,
n=c(400,550,650),
cens = 0.2,
tau=3,
lambda = 0.1,
k = 0.9,
B = 10,
seed = NULL
)
prova<-PowerIIphase(
betaBM=0.4,
pBM=0.2,
pstrata = 0.6,
betastrata = 0.5,
acc.aux = c(0.8,0.8),
design2p = c("CM","PPS"),
N=2000,
n=c(400),
cens = 0.2,
tau=3,
lambda = 0.1,
k = 0.9,
B = 10,
seed = NULL
)
prova<-PowerIIphase(
betaBM=0.4,
pBM=0.2,
pstrata = 0.6,
betastrata = 0.5,
acc.aux = c(0.8,0.8),
design2p = c("PPS"),
N=2000,
n=c(400),
cens = 0.2,
tau=3,
lambda = 0.1,
k = 0.9,
B = 10,
seed = NULL
)
prova
library(survey)
setwd("C:\\Users\\Graziano\\garrbox\\Two_phase_Bozza\\Design2phase_package\\design2phase\\R")
library(survey)
source(dataX.r)
source(dataX.R)
setwd("C:\\Users\\Graziano\\garrbox\\Two_phase_Bozza\\Package\\SamplSurvival\\R")
library(survey)
source(dataX.R)
source("dataX.R")
source("gensurvdata.R")
X<-dataX(N=2000, pBM=0.4, pstrata=0.5,surrogate=NULL)
setwd("C:\\Users\\Graziano\\garrbox\\Two_phase_Bozza\\Package\\Design2phase_package\\design2phase\\R")
setwd("C:\\Users\\Graziano\\garrbox\\Two_phase_Bozza\\Design2phase_package\\design2phase\\R")
library(survey)
source("dataX.R")
source("gensurvdata.R")
X<-dataX(N=2000, pBM=0.4, pstrata=0.5,surrogate=NULL)
dati<-genSAMPLEexpWeiC(N=2000, lambda=0.1, k=0.9,betaBM=0.4, betastrata=0.5,X, cens=0.1, tau=2)
head(dati)
n<-600
cases<-sample(dati$id[dati$censor==1], n/2, replace = FALSE, prob = NULL)
cntl<-sample(dati$id[!dati$censor==1],n-length(cases), replace = FALSE, prob =NULL)
idsampled<-c(cases,cntl);
campione<-dati[dati$id %in% idsampled,]
dati$incl<-ifelse(dati$id %in% idsampled,1,0);
des<-twophase(id=list(~id,~id),subset=~incl==1,strata=list(NULL,~censor),data=dati)
variance<-twophase2var(x=des$prob,design=des)
variance
twophase2var
x=des$prob
design=des
postStrata2 <- design$phase2$postStrata
postStrata2
postStrata1 <- design$phase1$full$postStrata
postStrata1
is.null(postStrata1) && is.null(postStrata2)
rval <- htvar.matrix(x, design$dcheck$full)
htvar.matrix
## used in twophase2var()
htvar.matrix<-function(xcheck, Dcheck){
if (is.null(dim(xcheck)))
xcheck<-as.matrix(xcheck)
rval<-apply(xcheck,2, function(xicheck)
apply(xcheck,2, function(xjcheck)
as.matrix(Matrix::crossprod(xicheck, Dcheck%*%xjcheck))
))
if(is.null(dim(rval))) dim(rval)<-c(1,1)
rval
}
htvar.matrix(x, design$dcheck$full)
htvar.matrix(x, design$dcheck$phase2)
attr(rval, "phases") <- list(phase1 = rval - ph2,
phase2 = ph2)
rval <- htvar.matrix(x, design$dcheck$full)
ph2 <- htvar.matrix(x, design$dcheck$phase2)
attr(rval, "phases") <- list(phase1 = rval - ph2,
phase2 = ph2)
rval
ph2
x
twophasevar(x=des$prob,design=des)
twophasevar
twophasevar(x=des$prob,design=des)
varhs<-svytotal(des$prob, design=des, deff=TRUE)
svytotal(des$prob, design=des, deff=TRUE)
svyvar(des$prob, design=des)
varlog=diag(vcov(varhs))
varlog
svytotal(des$prob, design=des)
twophasevar(x=des$prob,design=des)
variance<-twophase2var(x=des$prob,design=des)
variance
twophasevar
design$phase1$sample
design$phase1
design$phase1
twophasevar(x=des$prob,design=des)
svytotal(des$prob, design=des, deff=TRUE)
svytotal(des$prob, design=des)
svyvar(des$prob, design=des)
diag(vcov(varhs))
svyvar(des$prob, design=des)
svytotal(des$prob, design=des)
svytotal(des$prob, design=des, deff=TRUE)
twophasevar(x=des$prob,design=des)
#################----------------------------
twophase2var(x=des$prob,design=des)
twophasevar(x=des$prob,design=des)
svytotal(des$prob, design=des, deff=TRUE)
svytotal(des$prob, design=des)
svyvar(des$prob, design=des)
svyvar
############################
des
############################
str(des)
as.svydesign2(des)
as.svydesign2
HR(0.1)
?HR
des<-twophase(id=list(~id,~id),subset=~incl==1,strata=list(NULL,~censor),data=dati, method=c("full"))
des
variance<-twophase2var(x=des$prob,design=des)
variance
#################----------------------------
twophase2var(x=des$prob,design=des)
twophasevar(x=des$prob,design=des)
des<-twophase(id=list(~id,~id),subset=~incl==1,strata=list(NULL,~censor),data=dati)
variance<-twophase2var(x=des$prob,design=des)
variance
#################----------------------------
twophase2var(x=des$prob,design=des)
twophasevar(x=des$prob,design=des)
twophasevar
x
design
d1 <- design$phase1$sample
d1
NROW(x)
length(design$usu)
ph2pr <- design$usu
ph2pr
x
any(design$prob == Inf)
svyrecvar.phase1
x
d1$cluster
d1$strata
d1$fpc
d1$postStrata
ph2pr
design$phase1$full$fpc$sampsize
design$samescale
samescale
design$samescale
svyrecvar.phase1
svyrecvar.phase1<-function(x, clusters,  stratas, fpcs, postStrata=NULL,
lonely.psu=getOption("survey.lonely.psu"),
one.stage=getOption("survey.ultimate.cluster"),
ph2prob, nPSUfull){
x<-as.matrix(x)
cal<-NULL
## FIXME: calibration of phase 1 not yet implemented.
## Remove post-stratum means, which may cut across clusters
## Also center the data using any "g-calibration" models
if(!is.null(postStrata)){
stop("calibration of phase 1 not yet implemented")
for (psvar in postStrata){
if (inherits(psvar, "greg_calibration")) {
if (psvar$stage==0){
## G-calibration at population level
x<-qr.resid(psvar$qr,x/psvar$w)*psvar$w
} else {
## G-calibration within clusters
cal<-c(cal, list(psvar))
}
} else {
## ordinary post-stratification
psw<-attr(psvar, "weights")
postStrata<-as.factor(psvar)
psmeans<-rowsum(x/psw,psvar,reorder=TRUE)/as.vector(table(factor(psvar)))
x<- x-psmeans[match(psvar,sort(unique(psvar))),]*psw
}
}
}
multistage.phase1(x, clusters,stratas,fpcs$sampsize, fpcs$popsize,
lonely.psu=getOption("survey.lonely.psu"),
one.stage=one.stage,stage=1,cal=cal,ph2prob=ph2prob,
nPSUfull=nPSUfull)
}
vphase2 <- with(design, svyrecvar(u2, phase2$cluster, phase2$strata,
phase2$fpc, postStrata = phase2$postStrata))
u2 <- x
vphase2 <- with(design, svyrecvar(u2, phase2$cluster, phase2$strata,
phase2$fpc, postStrata = phase2$postStrata))
vphase2
rval <- vphase1 + vphase2
rval
vphase1
vphase2
#################----------------------------
twophase2var(x=des$prob,design=des)
twophasevar(x=des$prob,design=des)
#################----------------------------
twophase2var(x=des$prob,design=des)
twophase2var
svytotal(des$prob, design=des, deff=TRUE)
svytotal(des$prob, design=des)
svytotal
svyvar(des$prob, design=des)
#################----------------------------
twophase2var(x=des$prob,design=des)
twophasevar(x=des$prob,design=des)
#################----------------------------
twophase2var(x=des$prob,design=des)
twophase2var
#################----------------------------
twophase2var(x=des$prob,design=des)
#################----------------------------
vv<-twophase2var(x=des$prob,design=des)
str(VV)
#################----------------------------
vv<-twophase2var(x=des$prob,design=des)
str(vv)
vv[1,1]
vv[1,1]$phase
vv[1,1]$phase2
vv[1]
vv[1][2
]
vv[1][1]
vv[1][2]
vv
vv[1][2]
vv[1][3]
vv[1][4]
attr(vv,"phases")$phase1
attr(vv,"phases")$phase2
svytotal(des$prob, design=des, deff=TRUE)
svyvar(des$prob, design=des)
rei<-read.table(textConnection(
" id N n.a h n.ah n.h sub y
1 1 300 20 1 12 5 TRUE 1
2 2 300 20 1 12 5 TRUE 2
3 3 300 20 1 12 5 TRUE 3
4 4 300 20 1 12 5 TRUE 4
5 5 300 20 1 12 5 TRUE 5
6 6 300 20 1 12 5 FALSE NA
7 7 300 20 1 12 5 FALSE NA
8 8 300 20 1 12 5 FALSE NA
9 9 300 20 1 12 5 FALSE NA
10 10 300 20 1 12 5 FALSE NA
11 11 300 20 1 12 5 FALSE NA
12 12 300 20 1 12 5 FALSE NA
13 13 300 20 2 8 3 TRUE 6
14 14 300 20 2 8 3 TRUE 7
15 15 300 20 2 8 3 TRUE 8
16 16 300 20 2 8 3 FALSE NA
17 17 300 20 2 8 3 FALSE NA
18 18 300 20 2 8 3 FALSE NA
19 19 300 20 2 8 3 FALSE NA
20 20 300 20 2 8 3 FALSE NA
"), header=TRUE)
head(rei)
des.rei <- twophase(id=list(~id,~id), strata=list(NULL,~h),
+ fpc=list(~N,NULL), subset=~sub, data=rei)
des.rei <- twophase(id=list(~id,~id), strata=list(NULL,~h),fpc=list(~N,NULL), subset=~sub, data=rei)
des.rei
head(rei)
table(h)
table(rei$h)
tot<- svytotal(~y, des.rei)
tot
vv<-twophase2var(x=des.rei$prob,design=des.rei)
vv
svytotal(des.rei$prob, design=des.rei)
X<-dataX(N=2000, pBM=0.4, pstrata=0.5,surrogate=NULL)
dati<-genSAMPLEexpWeiC(N=2000, lambda=0.1, k=0.9,betaBM=0.4, betastrata=0.5,X, cens=0.1, tau=2)
dati
head(dati)
svytotal(~censor, design=des)
svytotal(~x1, design=des)
svytotal(~x1, design=des)
des
svytotal(~x1, design=des)
svytotal(~x1, design=des)
rei$w.ah <- rei$n.ah / rei$n.a
rei$w.ah
head$rei
head(rei)
dim(rei)
table(rei$sub)
table(rei$sub,rei$y)
des
str(des)
des$phase2$id
dati$incl
dati<-genSAMPLEexpWeiC(N=2000, lambda=0.1, k=0.9,betaBM=0.4, betastrata=0.5,X, cens=0.1, tau=2)
head(dati)
n<-600
cases<-sample(dati$id[dati$censor==1], n/2, replace = FALSE, prob = NULL)
cntl<-sample(dati$id[!dati$censor==1],n-length(cases), replace = FALSE, prob =NULL)
idsampled<-c(cases,cntl);
idsampled
svytotal(~idsampled, design=des)
svytotal(~idsampled, design=des)
attr(vcov(tot),"phases")$phase1
tot<- svytotal(~y, des.rei)
attr(vcov(tot),"phases")$phase1
rei$w.ah <- rei$n.ah / rei$n.a
a.rei <- aggregate(rei, by=list(rei$h), mean, na.rm=TRUE)
a.rei$S.ysh <- tapply(rei$y, rei$h, var, na.rm=TRUE)
a.rei$y.u <- sum(a.rei$w.ah * a.rei$y)
a.rei$f<-with(a.rei, n.a/N)
a.rei$delta.h<-with(a.rei, (1/n.h)*(n.a-n.ah)/(n.a-1))
Vphase1<-with(a.rei, sum(N*N*((1-f)/n.a)*( w.ah*(1-delta.h)*S.ysh+ ((n.a)/(n.a-1))*w.ah*(y-y.u)^2)))
Vphase1
attr(vcov(tot),"phases")$phase2
tot
attr(vcov(tot),"phases")$phase1
attr(vcov(tot),"phases")$phase2
tot<-svytotal(~idsampled, design=des)
attr(vcov(tot),"phases")$phase1
attr(vcov(tot),"phases")$phase2
tot<-svytotal(~des$prob, design=des)
attr(vcov(tot),"phases")$phase1
attr(vcov(tot),"phases")$phase2
